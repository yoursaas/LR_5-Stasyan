1.git push
2.git pull
3.git merge
4.go to submodule -> git merge -> go back -> git merge
5.in git folder / .git / remote
6.
 1. Good distributed model as each developer gets a local repository with a full history of commits which makes git fast compared to other VCs.
 2. Branching capabilities and merging are easy (as they are cheap), good data integrity.
 3. They are free and open-source we can easily download the source code and performs changes to it. They can handle larger projects efficiently.
 4. The push/pull operations are faster with a simple They save time and developers can fetch and create pull requests without switching.
 5. Data redundancy and replications. Add ons can be written in many languages.
 6. They have good and faster network performance and superior disk utilization and they think about its data like a sequence of snapshots.
 7. The object model is very simple and minimizes push/pull data transfers.
7.  
 1. GIT requires technical excellence and it is slower on windows. They have tedious command lines to input and don’t track renames.
 2. They have poor GUI and usability. And also, they take a lot of resources which slows down the performance.
 3. GIT doesn’t support checking out sub-trees. For each project, the central service would need to be set up for multiple package repositories.
 4. It lacks window support and doesn’t track empty folders.
 5. There is no built-in access control and doesn’t support binary files.
 6. They do not provide access control mechanisms in case of security.
 7. The process of Packing is very expensive completely.
8. git folder inside a project
9. Git tracks the changes you make to files, so you have a record of what has been done, and you can revert to specific versions should you ever need to. Git also makes collaboration easier, allowing changes by multiple people to all be merged into one source
10. updating from remote
11. comming
12. adding some changes
13. using branches help you organize the workflow more efficiently and rather effortlessly
14. join two or more development histories together
15. event that takes place when Git is unable to automatically resolve differences in code between two commits
16. modifications were only in one branch
17. yes